" The general layout was taken from godlygeek's vimrc. Most of what I've taken
" has been labeled.
"
" Be vim, not vi. Probably redundant since the presence of a vimrc sets nocp,
" but I like to be sure. This must be first, because it changes other options as
" a side effect.
set nocompatible

""" Pathogen
runtime pathogen/autoload/pathogen.vim
call pathogen#infect()

""" Vim Settings
"""" Patterns and search behavior
set incsearch           " do incremental searching
set nohlsearch          " instead use <F12> as mapped below
set ignorecase
set smartcase

"""" Tabs and indentation
set tabstop=8
set shiftwidth=4
set smarttab
set shiftround      " Round to a multiple of shiftwidth
set expandtab
set cinoptions=(0,g0,b1,l1
set autoindent

"""" Backup, swap, undo
set nobackup nowritebackup
set updatetime=1000
set directory^=~/.cache/vim/swapfiles//  " save swap files to a single directory
" The // means the swap filename will be bulit from the path for uniqueness

" The above and the below roughly taken from godlygeek's vimrc

if ! len(glob('~/.cache/vim/')) || ! len(glob("~/.cache/vim/swapfiles"))
    echomsg "~/.cache/vim{,/swapfiles} doesn't exist."
endif

if has('persistent_undo')
    set undofile
    set undodir^=~/.cache/vim/undofiles//
    set undoreload=1000

    if ! len(glob("~/.cache/vim/undofiles"))
        echomsg "~/.cache/vim/undofiles doesn't exist."
    endif
endif

"""" Reading settings
set modeline
set viminfo+=n~/.cache/vim/viminfo

"""" Reading/writing
set noautowrite noautowriteall
set noautoread

"""" Windows/buffers
set noequalalways
set splitright
set hidden
set switchbuf=useopen

"""" Folding
set foldmethod=marker

"""" Spelling
set spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add
set spellfile+=~/.vim/spell/names.utf-8.add
set spellfile+=~/.vim/spell/acro.utf-8.add

"""" Formatting
" Also see toggle#FormatToggle()
set formatoptions=
set formatoptions+=n " format based on 'flp'
set formatoptions+=1 " Break before one-letter words
let &formatlistpat = '^\s*[0-9*-]\+[\]:.)}\t ]\s*'
set textwidth=80
set nojoinspaces

"""" Input control
set mouse=v
set timeoutlen=1000
set ttimeoutlen=100
set lazyredraw

"""" Insert completion
set noinfercase  " Use the case of the match rather than what was typed
set completeopt=
set completeopt+=longest
set completeopt+=menu
set completeopt+=preview

"""" Messages and status
set confirm
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set showmode            " display NORMAL, REPLACE, etc
set visualbell t_vb=    " No fucking way do I want things beeping at me.
set report=0
set shortmess+=a        " Abbreviate various messages

if exists('+rnu')
    set relativenumber " relative numbers!!!
    set numberwidth=1
endif

set laststatus=2
let &statusline = '%<%#Folded# %n %## %f ' " bufnr and filename
let &stl .= '%h%w%m%r' " help, preview, modifi{ed,able}, readonly + spacer
let &stl .= '%{(&ro || &pvw || &mod || !&ma || &bt == "help") ? " " : ""}'
let &stl .= '%#LineNr# ' " change color
let &stl .= '%{STLSnipMate()}' " SnipMate stops/count if available
let &stl .= '%{STLQuickfix()}%a%=' " Qucikfix, argument list, end of left matter
let &stl .= '%{fugitive#head(7)}    ' " branch name or commit if detached
let &stl .= '%{&filetype}    ' " filetype (no extra characters)
let &stl .= '%-14.(%l,%c%V %) %P ' " line, col, percent through file

function! STLQuickfix()
    return exists('w:quickfix_title') ? w:quickfix_title : ''
endfunction

function! STLSnipMate()
    let state = get(b:, 'snip_state', {})
    if exists('state.stop_no') && exists('state.stop_count')
        return printf('%d/%d', state.stop_no, state.stop_count)
    else
        return ''
    endif
endfunction

"""" Moving/editing
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode
set scrolloff=2                 " Show 2 lines above/below cursor when possible
set virtualedit=block
set nostartofline

"""" 'listchars
if &enc =~ '\vu(tf|cs)'         " if Unicode...
    set listchars=tab:▶―,trail:∎,nbsp:∎
else
    set listchars=tab:>-,trail:-,nbsp:-
endif

if !&readonly  " Don't use 'list' when invoked as view
    set list
endif

"""" Command line
set history=100          " keep 50 lines of command line history
set wildmenu
set wildmode=longest:full,full
set suffixes+=.pdf,.log,.aux  " pdfTeX output files

"""" Tags
set tags+=~/.vim/tags.d/systags

""" Filetype stuff
" Enable filetype detection, ftplugin, and filetype indent settings
filetype plugin indent on

" Use LaTeX syntax not plaintex
let g:tex_flavor = 'latex'
" Assume POSIX sh
let g:is_posix = 1

" Switch syntax highlighting on when the terminal has colors
if &t_Co > 2 || has("gui_running")
    syntax on
    colors darksky
endif

""" Autocommands
" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Put these in an autocmd group, so that we can delete them easily.
    augroup myVimrc
    au!

    " For filetypes where I'll mostly be writing prose, enable spelling and 'tw'
    " based wrapping
    au FileType text,markdown setl spell fo+=a fo+=t
    au FileType gitcommit setl spell fo+=t tw=72
    " But don't enable spelling in help files
    au FileType help setl nospell

    " Disable modelines for certain git related files
    au FileType gitcommit,gitrebase setl nomodeline

    " Make K use internal help when editing VimScript or vimrc
    au FileType vim* setlocal kp=:help

    " This is for SnipMate snippets
    au FileType snippet* setlocal sts=8 sw=8 fdl=999

    au FileType ruby,eruby setlocal sts=2 sw=2
    au FileType html,xhtml,xml setlocal sts=2 sw=2

    " Use syntax folding for some filetypes
    au FileType c,cpp setl fdm=syntax fdl=999

    " Most ftplugins set this automatically, but not these
    au FileType vim,sh setl fo+=croql

    " gnuplot comments
    au FileType gnuplot setl commentstring=#%s

    " From :h last-position-jump
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " May require a viminfo file.
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif

    " I take notes in either TeX or Markdown, and Vim doesn't ftdetect Markdown
    " properly
    au BufReadPost,BufNewFile */notes/* if &ft != 'tex' | setl ft=markdown | endif

    " If there's no omnifunc, take one from the syntax
    " Taken from godlygeek's vimrc
    au Filetype * let &l:ofu = (len(&ofu) ? &ofu : 'syntaxcomplete#Complete')

    " Seeing trailing spaces while typing them is annoying, so disable that
    " listchar while in insert mode. This listchar is duplicated above so that
    " it will be in effect even if we never enter insert mode.
    if &enc =~ '\vu(tf|cs)' " if Unicode...
        au InsertEnter * setl listchars-=trail:∎
        au InsertLeave * setl listchars+=trail:∎
    else
        au InsertEnter * setl listchars-=trail:-
        au InsertLeave * setl listchars+=trail:-
    endif

    " Files in ~/.config/zsh are ft=zsh
    au BufNewFile,BufRead ~/.config/zsh/* setl ft=zsh

    " Normally I map <CR> to <C-]>. This interferes with the cmdline-window
    au CmdwinEnter * nnoremap <buffer> <CR> <CR>

    augroup END
endif

""" Maps
"""" Leaders
" This is so comfortable on Dvorak.
let mapleader = '-'
let maplocalleader = '_'

noremap - <nop>
noremap _ <nop>

sunmap -
sunmap _

"""" Normal mode mappings
" Don't use Ex mode, use Q for formatting
" Derived from the default vimrc
" This is mapped in an unwanted form in Gentoo's system vimrc, so unmap it first
silent! unmap Q
nnoremap Q gq
xnoremap Q gq

" Use Enter to follow tags
nnoremap <CR> <C-]>

" Make Y act more logically (like D and C)
nnoremap Y y$

" Make Space toggle folds
nnoremap <Space> za

" Insert blank lines easily
nnoremap <leader>o o<Esc>
nnoremap <leader>O O<Esc>

" What's the syntax attribute associated with the current word?
" Based on graywh's ShowSynStack() and ShowSynIDs() and :h synID()
if exists('*synstack')
    fun! ShowSyn()
        let ids = synstack(line('.'), col('.'))
        let names = {}
        for id in ids
            let names[synIDattr(id, 'name')] = synIDattr(synIDtrans(id), 'name')
        endfor
        echo names
    endf
else
    fun! ShowSyn()
        let id = synID(line('.'), col('.'))
        echo synIDattr(id, 'name') synIDattr(synIDtrans(id), 'name')
    endf
endif
nnoremap <leader>g :call ShowSyn()<CR>

" Remove trailing whitespace
function! RemoveWS()
    let l:save_reg = @/
    %s/\s\+$//e
    let @/ = l:save_reg
endfunction
nnoremap <leader>ws :call RemoveWS()<CR>

" Reselect what was just pasted (taken from Steve Losh)
nnoremap <leader>v V`]

" ZZ -- save
" ZQ -- quit unconditionally
" ZX -- save and quit
nnoremap ZZ :up<CR>
nnoremap ZX :x<CR>

" Make the current line blank
nnoremap <leader>e 0D

""""" Improvements (taken from godlygeek's vimrc)

" Switching with the alternate file preserves column/line
nnoremap <C-6> <C-6>`"

" <C-g> shows full path and buffer number
nnoremap <C-g> 2<C-g>

"""" Visual mode mappings
" Avoid including the end of line when using $ in visual character mode. It can
" still be selected with $l. Note that this can move the cursor left.
xnoremap <expr> $ mode() == 'v' ? '$h' : '$'

"""" Command line mappings
" Emacs bindings. Hate me if you must.
" Taken from godlygeek's vimrc
cnoremap <C-A>     <Home>
cnoremap <ESC>b    <S-Left>
cnoremap <ESC>f    <S-Right>

" Up/down line or history
if exists("*wildmenumode")
    cnoremap <expr> <C-P> wildmenumode() ? '<C-P>' : '<Up>'
    cnoremap <expr> <C-N> wildmenumode() ? '<C-N>' : '<Down>'
endif

"""" Insert mode mappings
" Some nice Emacs-like bindings. Hate me if you must.
" Do make sure they don't mess with insert-completion
inoremap <expr> <C-E> pumvisible() ? '<C-E>' : '<C-]><C-O>$'
inoremap <C-A> <C-]><C-O>^

" Some actions in insert mode one might hit accidentally or may not do what one
" meant. Let's make some of these actions undoable at the very least.
for i in ['<C-U>', '<C-@>', '<C-R>']
    exe 'inoremap' i '<C-G>u' . i
endfor

"""" Select mode mappings
" These are mostly for making things nicer with SnipMate

" I'm not yet certain these are the best way to write these.
" Enter insert mode before/after the current selection
snoremap <C-A> <C-C>`<i
snoremap <C-E> <C-C>`>a
"""" ^L as Esc
noremap <C-L> <Esc>
noremap! <C-L> <Esc>
" Make sure to trigger any abbreviations before leaving insert mode
inoremap <C-L> <C-]><Esc>
" In select mode, mapmode-v mappings go to visual mode, trigger the map, then go
" back to select mode, making the above map do nothing. So we make a separate
" map. See :h Select-mode-mapping
snoremap <C-L> <Esc>
" In mapmode-c, <Esc> runs the command as typed, so we use <C-c>. See :h c_<Esc>
cnoremap <C-L> <C-C>
" Esc doesn't really do anything in normal mode, so unmap <C-l> so we can still
" use it to redraw
nunmap <C-L>

"""" Function keys
nnoremap <expr> <F2> exists('b:make_map') ? b:make_map : ':make '
imap <F2> <Esc><F2>

set pastetoggle=<F5>

let opt_toggle = { '<F5>'  : 'paste',
                \  '<F6>'  : 'spell',
                \  '<F7>'  : 'toggle#MouseToggle',
                \  '<F8>'  : 'toggle#FormatToggle',
                \  '<F9>'  : 'hlsearch',
                \  '<F10>' : 'list',
                \  '<F11>' : 'relativenumber',
                \  '<F12>' : 'toggle#CCToggle',
                \}

for [key, val] in items(opt_toggle)
    if val == 'relativenumber' && !exists('+rnu')
        let val = 'number'
    endif

    if val[0] =~ '\U' && exists('+'.val)
        exe 'nnoremap <silent> ' . key . ' :setl ' . val . '! ' . val . '?<CR>'
    elseif val[0] =~ '\u' || val =~ '\V#'
        exe 'nnoremap <silent> ' . key . ' :call ' . val . '()<CR>'
    else
        echomsg "Not mapping " . key . ". " . val . " is unavailable."
    endif

    exe 'imap ' . key . ' <C-o>' . key
endfor

""" Plugins
"""" Commentary
nmap <leader>c  <Plug>Commentary
xmap <leader>c  <Plug>Commentary
nmap <leader>cc <Plug>CommentaryLine

"""" CSApprox
let g:CSApprox_hook_post = [
            \ 'hi Normal ctermfg=NONE ctermbg=NONE',
            \ 'hi Visual ctermfg=NONE ctermbg=NONE cterm=reverse',
            \ ]
let g:CSApprox_attr_map = { 'bold' : '', 'italic' : '', 'sp' : 'fg' }


"" taken from godlygeek's vimrc. Pretty nice way to handle folding.
"" vim:fdm=expr
"" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='
