# zsh zle set up

# for bindings that should be available for both viins and vicmd
for keymap in viins vicmd; do
    alias bindkey="bindkey -M $keymap"

    bindkey ${key[Home]}    vi-beginning-of-line
    bindkey ${key[End]}     vi-end-of-line
    bindkey ${key[Insert]}  overwrite-mode
    bindkey ${key[Delete]}  delete-char
    bindkey ${key[Up]}      up-line-or-history
    bindkey ${key[Down]}    down-line-or-history
    bindkey ${key[Left]}    backward-char
    bindkey ${key[Right]}   forward-char

    bindkey '^R' history-incremental-pattern-search-backward
    bindkey '^Xr' history-incremental-pattern-search-forward
    bindkey '^A' vi-beginning-of-line
    bindkey '^E' vi-end-of-line
    bindkey '^U' kill-whole-line
    bindkey '^_' undo
    bindkey '^N' down-line-or-history
    bindkey '^P' up-line-or-history

    unalias bindkey
done

bindkey -M viins '^[^W' backward-delete-word
bindkey -M viins ${key[Backspace]} backward-delete-char

# Prevent zsh from eating the next char because it thinks I'm pressing alt
bindkey -M vicmd '^[' vi-cmd-mode

# Make ^L switch to vi-cmd mode
bindkey -M viins '^L' vi-cmd-mode
# But still let screen clearing be available
bindkey -M vicmd '^L' clear-screen
# Leave the minibuffer
bindkey -M isearch '^L' accept-search

# Now with ^[. and ^-, we can easily change directories without repeatedly
# typing cd .. commands while also preserving our prompt.
function cd-wrap() {
    cd $1 > /dev/null
    zle reset-prompt
}
function up-dir() {
    cd-wrap ..
}
function prev-dir() {
    cd-wrap -
}
zle -N up-dir
zle -N prev-dir

bindkey '^[.' up-dir
bindkey '^[-' prev-dir

zle -C complete-file complete-word _generic
zstyle ':completion:complete-file::::' completer _files
bindkey '^F' complete-file

# rationalise-dot {{{1
# This was written entirely by Mikael Magnusson
# Basically type '...' to get '../..' with successive .'s adding /..
function rationalise-dot {
    local MATCH # keep the regex match from leaking to the environment
    if [[ $LBUFFER =~ '(^|/| |      |'$'\n''|\||;|&)\.\.$' ]]; then
      LBUFFER+=/
      zle self-insert
      zle self-insert
    else
      zle self-insert
    fi
}
zle -N rationalise-dot
bindkey . rationalise-dot
# without this, typing a . aborts incremental history search
bindkey -M isearch . self-insert

# irssi-down {{{1
# This was taken entirely from Valodim <https://github.com/Valodim>
# this function works like history-beginning-search-forward-end, except at the
# bottom end of history, if the buffer is non-empty, it is put into history.
# this way, commands can be "stashed away" into history without being run, just
# like in irssi.
function irssi-down() {
    if [[ -n "$BUFFER" && ${(%):-'%!'} == $HISTNO ]]; then
        print -s "$BUFFER"
        zle end-of-history
        BUFFER=''
    else
        # compatibility with history-beginning-search-forward-end
        integer cursor=$CURSOR mark=$MARK
        if [[ $LASTWIDGET == history-beginning-search-*-end || $LASTWIDGET == irssi-down ]]
        then
            CURSOR=$MARK
        else
            MARK=$CURSOR
        fi
        if zle .history-beginning-search-forward; then
            zle .end-of-line
        else
            CURSOR=$cursor
            MARK=$mark
            return 1
        fi
    fi
}
zle -N irssi-down
bindkey -M viins ${key[Down]} irssi-down
